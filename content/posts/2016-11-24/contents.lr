title: 파이썬 의존성 관리
---
pub_date: 2016-11-24
---
body:

> ![requirements.txt 파일](/posts/2016-11-24/requirements.png)
> *<small>일반적인 pip 프로젝트의 requirements.txt. 주 의존성과 부수적 의존성의 구분이 없다</small>*

파이썬의 [훌륭한 생태계][3]에도 불구하고 큰 프로젝트를 시작할 때면 `requirements.txt`를 통해 의존성을 관리하는 방식 때문에 고생을 한 적이 한 두 번이 아니다. pip 프로젝트의 경우 일반적으로 `pip freeze`를 통해 현재 파이썬 런타임에 설치된 패키지들의 버전들을 pin하여 `requirements.txt`에 기록하여 관리한다. 그런데 이런식으로 의존성을 관리할 경우 주 의존성과 부수적 의존성들을 구분하기 어렵고, 따라서 라이브러리 버전 업데이트가 필요한 경우 수작업을 통해 서로의 요구조건에 부합하는 버전을 짜맞추어야 하는 [처참한 상황][4]이 발생할 수 있다.

가령 기존의 주 의존성 *A.1*이 *B.2x*에 의존하고, 새로 업데이트 된 *A.2*가 *B.3x*에 의존하는 상황을 생각해보자. 이 상황에서 단순히 주어진 `requirements.txt`의 *A.1*을 *A.2*로 바꾸어 의존성을 업데이트 하려는 경우 B에서 버전충돌이 일어나게 된다. `requirements.txt`에 부수적 의존성인 *B.2x*가 명시되어 있기 때문이다. 작은 장난감 프로젝트에서는 눈대중으로 `requirements.txt`을 흝어보며 *B*도 알맞게 버전을 갱신해주는 방법으로 해결 가능하지만, 수십개의 라이브러리를 쓰는 큰 규모의 프로젝트에서 이런 일이 발생할 경우엔 정말 절망적인 상황이 벌어진다.

이 문제는 사실 `requirements.txt`에 pinned 의존성을 저장하는 기존 방식 그 자체 때문이 아니라, **주 의존성과 전체 의존성의 pinned version을 따로 관리하는 메커니즘을 제공하지 않기 때문에 발생하는 간단한 문제다.**

다행히도 pypa에서 이 두 가지 의존성을 동시에 관리할 수 있도록 보장하는 [Pipfile의 명세를 작성하는 작업을 며칠 전 시작했다][1]. 아직 확정되진 않았지만, 주요 기능은 다음과 같다:

> ![Pipfile 파일](/posts/2016-11-24/pipfile.png)
> *<small>현재 명세 초안에 공개된 Pipfile 예시. Pipfile은 주 의존성만을 기록하고, 전체 의존성은 Pipfile.lock에 pin된다</small>*

- `requirements.txt`에 현재 파이썬 런타임에 설치된 모든 패키지들을 pin하여 저장하는 대신, 프로젝트에 필요한 주 의존성들만 `Pipfile`에 기록하여 관리한다.

- `Pipfile`에서 관리되는 주 의존성을 포함한 빌드 순간의 프로젝트 전체 의존성은 `Pipfile.lock`에 pin되어 기록된다. 해시 체크섬 기능을 지원하므로 배포환경에서도 언제나 deterministic한 빌드 재생산이 보장된다.

- 개발환경과 배포환경에서의 의존성을 따로 관리할 수 있도록 의존성 분리 기능을 지원한다.

사실 위 기능들은 모두 PHP의 Composer나 Ruby의 Bundler, JavaScript의 NPM 등에서 빌려온 아이디어다. 이 문제는 [몇 년 전부터 커뮤니티에서 제기되어왔던 문제][6]임에도 불구하고 왜 이제서야 pypa팀에서 대응책이 나온건지는 나도 잘 이해가 안된다.

명세 초안에서 Pipfile의 포맷이 정적인 JSON이나 TOML가 아니라 [일반 파이썬 executable로 구상되어 있는 점에 대한 논란][5]이 있긴 하지만, 개인적으로 이 정도면 기존의 절망적인 상황에 비해 큰 발전이라고 생각한다. Pipfile 구현체의 배포는 파이썬 3.4에 asyncio가 표준 라이브러리로 추가된 이후로 파이썬 생태계에 가장 큰 임팩트를 줄 사건이 될 것이다.


[1]: https://github.com/pypa/pipfile
[2]: https://www.pypa.io/en/latest/
[3]: ../2016-11-23
[4]: https://www.kennethreitz.org/essays/a-better-pip-workflow#thefrustrations
[5]: https://news.ycombinator.com/item?id=13011932#unv_13012683
[6]: https://medium.com/@alonisser/things-i-wish-pip-learned-from-npm-f712fa26f5bc#.v1izpzcsc
